import java.io.*;
import java.util.*;
public class CandidateCode 
{ 

    public static String[] getTolls(String[] input1,int input2)
    {
        String[] sss=null;
        try{
            
            String[] strArr=input1[0].split(",");
            String[]tempArr=strArr[0].split("#");
	        
	        int J=Integer.parseInt(tempArr[0]);
	        int R=Integer.parseInt(tempArr[1]);
	        int[][] dataArr=new int[J+1][J+1];
	        LinkedList<String> routeNumber=new LinkedList<>();
	        for(int i=1;i<=R;i++){
	            tempArr=strArr[i].split("#");
	            int start=Integer.parseInt(tempArr[0]);
	            int end=Integer.parseInt(tempArr[1]);
	            int cost=Integer.parseInt(tempArr[2]);
	            dataArr[start][end]=cost;
	            routeNumber.add(start+"#"+end);
	        }
	       sss=solution(dataArr, J+1, J+1,R,routeNumber);
            
        }catch(Exception e){
            e.printStackTrace();
            
        }
        return sss;
    }
    
    
       static String[] solution(int[][] dataArr,int M,int N,int R,LinkedList<String> routeNumber){
    	int[] solutionArray=new int[routeNumber.size()];
    	ArrayList<ArrayList<Integer>> list=new ArrayList<>();
    	for(int a=1;a<N;a++){
    		if(dataArr[1][a]!=0){
    			ArrayList<Integer> route=new ArrayList<>();
    			route.add(1);
    			route.add(a);
    			list.add(route);
    			getPaths(dataArr,M,N,a,route,list);
    		}
    	}
    	ArrayList<Integer> cost = new ArrayList<>();
    	int j=0;
    	int MAX=0;
    	for(ArrayList<Integer> a:list){
    		cost.add(0);
	    		for(int i=1;i<a.size();i++){
	    			int temp=cost.get(j);
	    			cost.remove(j);
	    			cost.add(j, temp+dataArr[a.get(i-1)][a.get(i)]);
	    		}
	    		if(MAX<cost.get(j))MAX=cost.get(j);
    		j++;
    	}
    	
    	j=0;
    	int differecnce=0;
    	
    	int maxCount=list.size();
    	
    	boolean[] visited=new boolean[R];
    	for(int m=0;m<list.size();m++){
    		ArrayList<Integer> routeToExamine=list.get(m);
    		int sizeOfRoute=routeToExamine.size();
    		boolean allow=true;
    		int local=sizeOfRoute;
			int diff=MAX-cost.get(m);
    		while(diff>0 && local>1){
    			int start=routeToExamine.get(local-2);
    			int end=routeToExamine.get(local-1);
    			boolean allowinotherroute=false;
    			for(int n=m+1;n<list.size();n++){
    				allow=false;
    				ArrayList<Integer> otherRoute=list.get(n);
    				int otherRouteDiff=MAX-cost.get(n);
    				if(otherRouteDiff>0 && otherRoute.contains(start) && otherRoute.contains(end) && !visited[routeNumber.indexOf(start+"#"+end)]){
    					if(otherRouteDiff==diff) {
    						allowinotherroute=true;
    						cost.remove(n);
    						cost.add(n, MAX);
    						visited[routeNumber.indexOf(start+"#"+end)]=true;
    						}
    					else {
    						allowinotherroute=false;
    					}
    				}
    				if(allowinotherroute){
    					allow=true;
    				}
    				
    			}
    			if(allow){
    				cost.remove(local-1);
    				cost.add(local-1,MAX);
    				String key=start+"#"+end;
    				solutionArray[routeNumber.indexOf(key)-1]=diff;
    				visited[routeNumber.indexOf(key)]=true;
    				break;
    			}else if(allowinotherroute==false){
    				local--;
    				break;
    			}else local--;
    		}
    		if(!allow){
    			cost.remove(m);
    			cost.add(m,MAX);
				String key=routeToExamine.get(sizeOfRoute-2)+"#"+routeToExamine.get(sizeOfRoute-1);
				int i=0;
				while(solutionArray[routeNumber.indexOf(key)]!=0){
					key=routeToExamine.get(i)+"#"+routeToExamine.get(i+1);
					i++;
				}
				solutionArray[routeNumber.indexOf(key)]=diff;
				visited[routeNumber.indexOf(key)]=true;
    		}
    	}
    	
    	
    	String[] solution=new String[solutionArray.length+1];
    	solution[0]=solutionArray.length+"#"+MAX;
    	int k=1;
    	int m=0;
    	for(int s:solutionArray){
    		if(s!=0){
    			solution[k++]=m+"#"+s;
    		}
    		m++;
    	}
    	
    return solution;
    	
    	
    	
    	
    }
    static void getPaths(int[][] dataArr,int M,int N,int j,ArrayList<Integer> list,ArrayList<ArrayList<Integer>> array){
    	int local=0;
    		for(int b=1;b<N;b++){
    			if(dataArr[j][b]!=0){
    				if(local++!=0){
    					ArrayList<Integer> copiedList = new ArrayList<>();
    					for(int kk=0;kk<list.size()-2;kk++)
    						copiedList.add(list.get(kk));
    					copiedList.add(b);
    					array.add(copiedList);
	    				getPaths(dataArr, M, N, b, copiedList,array);
    				}else{
	    				list.add(b);
	    				getPaths(dataArr, M, N, b, list,array);
    				}
    			}
    		}
    }
    static int getIndex(ArrayList<Integer>[] array){
    	for(int i=0;i<array.length;i++){
    		if(array[i]==null)return i;
    	}
    	return 0;
    }
    
    
}
